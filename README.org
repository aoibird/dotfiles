#+TITLE: Dotfiles
#+PROPERTY: header-args :mkdirp yes

My personal configurations.

- ~cd ~/dotfiles~
- ~stow -S --dotfiles <config_dir>~ to install
- ~stow -D --dotfiles <config_dir>~ to uninstall


* Scripts

=C-c C-v t= to tangle the current file.

** =myinstall=
#+begin_src sh :shebang #!/bin/bash :tangle scripts/myinstall
  # myinstall -- logs installed packages

  installlog="$HOME/dotfiles/install.log"

  if [ $# -eq 0 ]; then
      echo "Usage: $0 [-s] list of packages to install" >&2
      exit 1
  fi

  if [ "$(uname)" = "Darwin" ]; then
      if brew install "$@"; then
          if [ "$1" = "-s" ]; then
              shift               # Silent
          else
              echo "$(date "+%Y-%m-%d %H.%M.%S"): $*" >> "$installlog"
          fi
      else
          echo "Error: failed to install"
          exit 1
      fi
  else
      echo "Error: unknown operating system"
      exit 1
  fi

  exit 0
#+end_src

** =mybackup=
#+begin_src bash :shebang #!/usr/bin/env bash :tangle scripts/mybackup
  # mybackup -- backups given files and directories to the backup volume

  BACKUPVOL="$HOME/backup"        # ln -s /Volumes/backup_volume $HOME/backup

  if [ $# -eq 0 ]; then
      echo "Usage: $(basename "$0") list of files or directories"
      exit 1
  fi

  if [ -d "$BACKUPVOL" ]; then
      dayofweek="$(date "+%A")"
      mkdir -p "$BACKUPVOL/$dayofweek"

      # Skip invalid files or directories
      params=( "$@" )
      pos=0
      for file in "${params[@]}"
      do
        if [ ! -e "$file" ]; then
            echo "$(basename "$0"): WARNING: \"$file\" does not exist. Skipped."
            unset params["$pos"]
        fi

        pos=$(( $pos + 1 ))
      done

      if [ "${#params[@]}" = 0 ]; then
          echo "$(basename "$0"): ERROR: no files were transferred."
          exit 1
      fi

      ###### EXECUTE ######
      exec rsync -av --delete "${params[@]}" "$BACKUPVOL/$dayofweek"
  else
      echo "$(basename "$0"): ERROR: the backup volume $BACKUPVOL cannot be found"
      exit 1
  fi


  exit 0
#+end_src

#+begin_src sh
mybackup "$HOME/test/My Dir" ~/test/Does\ Not\ Exist ~/test/hello.txt
#+end_src

** =myextract=
#+begin_src python :shebang #!/usr/bin/env python :tangle scripts/myextract
  import os
  import sys
  import zipfile

  filename = sys.argv[1]
  print("Extracting " + filename)
  file = zipfile.ZipFile(filename, 'r')
  for name in file.namelist():
      unbak_name = name.encode('cp437').decode('cp936')
      print("Extracting " + unbak_name)
      directory = os.path.dirname(unbak_name)
      if not os.path.exists(directory) and directory != '':
          os.makedirs(directory)

      data = file.read(name)
      if not os.path.exists(unbak_name):
          f = open(unbak_name, 'wb')
          f.write(data)
          f.close()
  file.close()
#+end_src

** =myunbake=
#+begin_src python :shebang #!/usr/bin/env python :tangle scripts/myunbake
  import sys
  import os

  filenames = sys.argv[1:]

  for filename in filenames:
      filename_output = os.path.join(os.path.dirname(filename),
                                     'utf8_' + os.path.basename(filename))

      fi = open(filename, 'r', encoding='gbk')
      if os.path.exists(filename_output):
          print("Error: File '"+ filename_output +"' already exists")
          continue
      fo = open(filename_output, 'w', encoding='utf8')

      fo.write(fi.read())

      fi.close()
      fo.close()
#+end_src

** =mygadu=

#+begin_src bash :shebang #!/usr/bin/env bash :tangle scripts/mygadu
  git annex find "$@" --include '*' --format='${bytesize}\n' | awk '{ sum += $1; nfiles++; } END { printf "%d files, %.3f MB\n", nfiles, sum/1000000 } '
#+end_src

From [[https://git-annex.branchable.com/tips/yet_another_simple_disk_usage_like_utility/][yet another simple disk usage like utility]].
